@*css shits*@
<style>
    #UserBlock {
        width: 88%;
        margin-left: 12%;
        background-color: antiquewhite;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        border: groove;
    }

    #RPTitle {
        height: 40px;
        font: message-box;
        font-family: Tahoma;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .LabelTitle {
        margin-left: 12%;
        line-height: 1.5;
        word-wrap: break-word;
    }

    #GroupBy {
        border: solid;
    }

    #LabelBlock {
        width: 88%;
        margin-left: 12%;
        background-color: whitesmoke;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
    }

    #talbeBlock {
        width: 11.8%;
        height: 1000px;
        position: fixed;
        white-space: nowrap;
        overflow-x: auto;
        background-color: lightgoldenrodyellow;
    }

    .BTN {
        width: 75px;
        height: 25px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
    }

    .TableLabel {
        font: message-box;
        font-family: Tahoma;
        line-height: 1.5;
        word-wrap: break-word;
    }



    .right {
        margin-right: 60px;
        display: inline-block;
        float: right;
    }

    .right2 {
        height: 30px;
        white-space: nowrap;
        overflow: hidden;
        word-wrap: break-word;
        display: inline-block;
        float: right;
    }

    #parent {
        width: 88%;
        margin-left: 12%;
        white-space: nowrap;
        background-color: whitesmoke;
    }

    #AreaQuery {
        width: 88%;
        margin-left: 12%;
        height: 200px;
        font-family: Tahoma;
        word-wrap: break-word;
        border: groove;
    }

    .BtnUser {
        width: 80px;
        height: 30px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        word-wrap: break-word;
        margin-left: 30px;
    }

    .child {
        width: 110px;
        height: 40px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        word-wrap: break-word;
    }

    .childLabel {
        width: 110px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        word-wrap: break-word;
        vertical-align: middle;
        text-align: left;
    }

    .AddBtn {
        width: 100px;
        height: 40px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        word-wrap: break-word;
        vertical-align: middle;
        text-align: left;
    }

    .child2 {
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        text-align: center;
        vertical-align: middle;
        text-align: left;
    }

    .TableCond {
        width: 110px;
        height: 20px;
        white-space: nowrap;
        overflow: hidden;
        display: inline-block;
        vertical-align: middle;
        text-align: left;
    }

    #divCont {
        width: 88%;
        margin-left: 12%;
        height: 200px;
        background-color: gray;
    }
</style>
@*Some variables i generate by C#*@
@{
    int TableCounter;
}
@*javascript shits*@

<script type="text/javascript">
    var Counter = 1;
    function SelectCol(eleID) {
        var TableSelect = eleID;
        var ColSelect = document.getElementById(TableSelect.id + "_Col");
        const List = @Html.Raw(Json.Encode(ViewBag.TableDict));
        ColSelect.length = 1;
        var Key = TableSelect.options[TableSelect.selectedIndex].text;;
        @*alert(List[Key]);*@
        const array = List[Key];
        for (var i = 0; i < array.length; i++) {
            ColSelect.options[ColSelect.options.length] = new Option(array[i], array[i]);
        }
        GenerateQuery();
    }
    function AddControl() {
        //create some divs
        var div = document.createElement('DIV');
        div.setAttribute("class", "SelectLine");
        AddSelects(div);
        //Code cascading dropdown that i need to learn. fuck this shit!

        //button and yes more div
        //that many div because i need that to make everything stuck in same line
        var div4 = document.createElement('DIV');
        div4.setAttribute("class", "child2");
        var button = '<input class="AddBtn" type="button" onclick="RemoveControl(this)" value="Remove" />';
        var showCB = '<input name="show" type="checkbox" onclick="GenerateQuery()" value="show" checked />';
        div4.innerHTML += button;
        div4.innerHTML += showCB;
        div.appendChild(div4);
        document.getElementById("parent").appendChild(div);
        CheckedTable();
    }
    function RemoveControl(div) {
        document.getElementById("parent").removeChild(div.parentNode.parentNode);
    }
    function RemoveAllControl()
        {
        const collection = document.getElementById("parent").querySelectorAll(".SelectLine");
        var temp = collection.length;
        var count = 0;
        for (var i = 0; i <temp ; i++) {
            collection[i].remove();
            count++;
        }
    }
    function GroupByChecked(e) {
        var ele = document.getElementById("parent");
        var input = e;


        if (input.checked == true) {
            //create some divs
            //line 1
            var div = document.createElement('DIV');
            div.setAttribute("id", "GroupBy" );
            ele.insertBefore(div, ele.firstChild);

            var divLabel = document.createElement('DIV');
            divLabel.setAttribute("class", "child2");

            var label = document.createElement("LABEL");
            var text = document.createTextNode('<==GROUP BY ');
            label.appendChild(text);
            label.setAttribute("class", "Label");


            AddSelectsGroupBy(div, 0);
            divLabel.appendChild(label);
            div.appendChild(divLabel);
            //line 2
            var divLine2 = document.createElement('DIV');
            div.appendChild(divLine2);
            AddSelectsGroupBy(divLine2,1);

            var divLabel2 = document.createElement('DIV');
            divLabel2.setAttribute("class", "child2");
            var label2 = document.createElement("LABEL");
            var text2 = document.createTextNode('<==HAVING');
            label2.appendChild(text2);
            label2.setAttribute("class", "Label");
            divLabel2.appendChild(label2);
            divLine2.appendChild(divLabel2);
            //
            //end
            CheckedTable();
        }
        else {
            document.getElementById("GroupBy").remove();
        }
    }
    //
    function AddSelects(div) {
        var div2 = document.createElement('DIV');
        div2.setAttribute("class", "child2");

        const array2 = ["COUNT", "AVG", "SUM", "MIN", "MAX"];
        const array3 = ["Tăng dần", "Giảm dần"];
        //Create and append select list
        var selectList = document.createElement("select");
        selectList.setAttribute("id", "TSelect" + Counter);
        selectList.setAttribute("class", "child");
        selectList.setAttribute("name", "TS");
        selectList.setAttribute("onchange", "SelectCol(this)");
        div2.appendChild(selectList);
        selectList.options[selectList.options.length] = new Option("Chọn Table", "default");
        //select for Column
        var selectList2 = document.createElement("select");
        selectList2.setAttribute("id", "TSelect" + Counter + "_Col");
        selectList2.setAttribute("class", "child");
        selectList2.setAttribute("onchange", "GenerateQuery()");
        selectList2.setAttribute("name", "Col");
        //add this to div2 first
        div2.appendChild(selectList2);
        //create default option
        selectList2.options[selectList2.options.length] = new Option("Chọn Col", "default");
        //the rest of selects
        var selectList3 = document.createElement("select");
        var selectList4 = document.createElement("select");

        selectList3.setAttribute("class", "child");
        selectList3.setAttribute("name", "Func");
        selectList3.setAttribute("onchange", "GenerateQuery()");
        selectList4.setAttribute("class", "child");
        selectList4.setAttribute("name", "Sort");
        selectList4.setAttribute("onchange", "GenerateQuery()");
        div2.appendChild(selectList3);
        div2.appendChild(selectList4);

        selectList3.options[selectList3.options.length] = new Option("Chọn Function", "default");
        selectList4.options[selectList4.options.length] = new Option("Chọn Sort", "default");
        for (var i = 0; i < array2.length; i++) {
            selectList3.options[selectList3.options.length] = new Option(array2[i], array2[i]);
        }
        selectList4.options[selectList4.options.length] = new Option(array3[0], "ASC");
        selectList4.options[selectList4.options.length] = new Option(array3[1], "DESC");

        div2.innerHTML += '<input class="AddBtn" name="alias" onkeyup="GenerateQuery()"/>';
        //add to div
        div.appendChild(div2);
        //creat table and i need another div
        var div3 = document.createElement('DIV');
        div3.setAttribute("class", "child2");
        //

        // create elements <table> and a <tbody>
        var tbl = document.createElement("table");
        tbl.setAttribute("name","ConditionTable");
        //var tblBody = document.createElement("tbody");
        // cells creation
        for (var j = 0; j < 2; j++) {
            // table row creation
            var row = document.createElement("tr");
            for (var i = 0; i < 5; i++) {
                var cell = document.createElement("td");
                cell.innerHTML += '<input class="TableCond" onkeyup="GenerateQuery()"/>';
                row.appendChild(cell);
            }
            //row added to end of table body
            tbl.appendChild(row);
        }
        // append the <tbody> inside the <table>
        //add div3 to div
        div3.appendChild(tbl)
        div.appendChild(div3);
        Counter++;
    }
    function AddSelectsGroupBy(div, option) {
        var div2 = document.createElement('DIV');
        div2.setAttribute("class", "child2");

        const array2 = ["COUNT", "AVG", "SUM", "MIN", "MAX"];
        const array3 = ["Tăng dần", "Giảm dần"];
        //Create and append select list
        var selectList = document.createElement("select");
        selectList.setAttribute("id", "TSelectGB" + option);
        selectList.setAttribute("class", "child");
        selectList.setAttribute("name", "TS");
        selectList.setAttribute("onchange", "SelectCol(this)");
        div2.appendChild(selectList);
        selectList.options[selectList.options.length] = new Option("Chọn Table", "default");
        //select for Column
        var selectList2 = document.createElement("select");
        selectList2.setAttribute("id", "TSelectGB" + option + "_Col");
        selectList2.setAttribute("class", "child");
        selectList2.setAttribute("name", "Col");
        selectList2.setAttribute("onchange", "GenerateQuery()");
        //add this to div2 first
        div2.appendChild(selectList2);
        //create default option
        selectList2.options[selectList2.options.length] = new Option("Chọn Col", "default");
        //the rest of selects
        var selectList3 = document.createElement("select");
        var selectList4 = document.createElement("select");

        selectList3.setAttribute("class", "child");
        selectList3.setAttribute("name", "Func");
        selectList3.setAttribute("onchange", "GenerateQuery()");
        selectList3.setAttribute("id", "FuncGB" + option);
        selectList4.setAttribute("class", "child");
        selectList4.setAttribute("name", "Sort");
        selectList4.setAttribute("onchange", "GenerateQuery()");
        div2.appendChild(selectList3);
        div2.appendChild(selectList4);

        if (option != 1) {
            selectList3.options[selectList3.options.length] = new Option("Chọn Function", "default");
        }
        selectList4.options[selectList4.options.length] = new Option("Chọn Sort", "default");
        for (var i = 0; i < array2.length; i++) {
            selectList3.options[selectList3.options.length] = new Option(array2[i], array2[i]);
        }
        selectList4.options[selectList4.options.length] = new Option(array3[0], "ASC");
        selectList4.options[selectList4.options.length] = new Option(array3[1], "DESC");

        div2.innerHTML += '<input class="AddBtn" name="alias" id="AliasGB' + option + '" onkeyup="GenerateQuery()"/>';
        //add to div
        div.appendChild(div2);
        //creat table and i need another div
        var div3 = document.createElement('DIV');
        div3.setAttribute("class", "child2");
        //

        // create elements <table> and a <tbody>
        var tbl = document.createElement("table");

        if (option == 0) {
            tbl.setAttribute("name", "ConditionTable");
        }
        else if (option == 1) {
            tbl.setAttribute("id", "TableHaving");
            var tbl2 = document.createElement("table");
            tbl2.setAttribute("hidden","true");
            tbl2.setAttribute("name", "ConditionTable");
            div3.appendChild(tbl2);
        }
        // cells creation
        var rowcount = 2;
        var colcount = 5;
        for (var j = 0; j < rowcount; j++) {
            // table row creation
            var row = document.createElement("tr");
            for (var i = 0; i < colcount; i++) {
                var cell = document.createElement("td");
                cell.innerHTML += '<input class="TableCond" onkeyup="GenerateQuery()"/>';
                row.appendChild(cell);
            }
            //row added to end of table body
            tbl.appendChild(row);
        }
        //add div3 to div
        div3.appendChild(tbl)
        div.appendChild(div3);
        var showCB = '<input name="show" type="checkbox" onclick="" value="show" checked hidden/>';
        div.innerHTML += showCB;
        Counter++;
    }
    function CheckedTable() {
        const selects = document.getElementsByName("TS");
        const Cols = document.getElementsByName("Col");

        const boxs = document.getElementsByName("BoxTable");
        for (var i = 0; i < selects.length; i++) {
            var temp =selects[i].value;
            selects[i].length = 1;
            for (var j = 0; j < boxs.length; j++) {
                if (boxs[j].checked == true) {
                    text = boxs[j].value;
                    selects[i].options[selects[i].options.length] = new Option(text, text);
                }
                else {
                    if (boxs[j].value === temp) {
                        temp = "default";
                        Cols[i].value = temp;
                    }
                }
            }
            selects[i].value = temp;
        }
    }
    function CheckAll(bool) {
        const boxs = document.getElementsByName("BoxTable");
        for (var j = 0; j < boxs.length; j++) {
            boxs[j].checked = bool;
        }
        CheckedTable();
    }
    function ForceChange(select) {
        const funcs = document.getElementsByName("Func");
        const shows = document.getElementsByName("show");
        var temp = select.options[select.selectedIndex].value;
        var index = select.selectedIndex;
        if (temp === "default") {
            for (var i = 0; i < funcs.length; i++) {
                if (shows[i].checked==true)
                funcs[i].selectedIndex = 0;
            }
        }
        else {
            for (var i = 0; i < funcs.length; i++) {
                if (shows[i].checked == true)
                funcs[i].selectedIndex = 1;
            }
        }
        select.selectedIndex = index;
    }
    function GenerateQuery() {
        var queryArea = document.getElementById("AreaQuery");
        const List = @Html.Raw(Json.Encode(ViewBag.Relations));
        const boxs = document.getElementsByName("BoxTable");
        const ChosedTables = [];
        for (var j = 0; j < boxs.length; j++) {
            if (boxs[j].checked == true) {
                 var text=boxs[j].value;
                ChosedTables.push(text);
            }
        }

        //
        const STables = document.getElementsByName("TS");
        const SCols = document.getElementsByName("Col");
        const SFuncs = document.getElementsByName("Func");
        const SSorts = document.getElementsByName("Sort");
        const SConds = document.getElementsByName("ConditionTable");
        const Shows = document.getElementsByName("show");
        const SAlias = document.getElementsByName("alias");


        //group by
        var radio = document.getElementById("GByCheck");
        //data of group by

        const HavingList = [];
        var Hcols = 5;
        for (var i = 0; i < Hcols; i++) {
            HavingList[i] = [];
        }
        const GroupByList = [];
        if (radio.checked) {

            const SFuncsGB = document.getElementsByName("FuncGB");

            var TableGB0 = document.getElementById("TSelectGB0");
            var TableGB1 = document.getElementById("TSelectGB1");

            var Col0 = document.getElementById("TSelectGB0_Col");
            var Col1 = document.getElementById("TSelectGB1_Col");

            var Func0 = document.getElementById("FuncGB0");
            var Func1 = document.getElementById("FuncGB1");

            var Alias0 = document.getElementById("AliasGB0");
            var Alias1 = document.getElementById("AliasGB1");


            var SCondsGB = document.getElementById("TableHaving");


            if (Col0.value !== "default") {
               @* if (Alias0.value.toString().trim() === "") {*@
                if (Func0.value === "default") {
                    var temp = TableGB0.value + "." + Col0.value;
                    GroupByList.push(temp);
                }
                else {
                    var temp = Func0.value + "(" + TableGB0.value + "." + Col0.value + ")";
                    GroupByList.push(temp);
                }

               @* else {
                    var temp = Alias0.value;
                    GroupByList.push(temp);
                }*@
            }

            //Conds table
            var rowLength = SCondsGB.rows.length;
            for (i = 0; i < rowLength; i++) {
                //gets cells of current row
                var oCells = SCondsGB.rows.item(i).cells;
                //loops through each cell in current row
                for (var j = 0; j < oCells.length; j++) {
                    var data = oCells.item(j).firstChild.value.toString();
                    if (data.trim() !== "" && Col1.value !== "default") {
                        var temp = Alias1.value.toString();
                        @*if (temp.trim() === "") {*@
                            if (Func1.value === "default") {
                                var text = TableGB1.value + "." + Col1.value + " " + data;
                                HavingList[j].push(text);
                            }
                            else {
                                var text = Func1.value + "(" + TableGB1.value + "." + Col1.value + ")" + data;
                                HavingList[j].push(text);
                            }
                        @*}
                        else {
                            var text = Alias1.value + " " + data;
                            HavingList[j].push(text);
                        }*@
                    }
                }
            }

        }

        //List of where conditions. and this list hold relations
        const RWhereList = [];
        //Check the realtions and add to the list
        for (var i = 0; i < List.length; i++) {
            for (var j = 0; j < ChosedTables.length; j++) {
                if (List[i][1] === ChosedTables[j]) {
                    j = ChosedTables.length;
                    for (var k = 0; k < ChosedTables.length; k++) {
                        if (List[i][3] === ChosedTables[k])
                        {
                            var temp = List[i][1] + "." + List[i][2] + " = " + List[i][3] + "." + List[i][4];
                            RWhereList.push(temp);
                        }
                    }
                }
            }
        }
        //list of select field
        const SelectList = new Set();
        for (var i = 0; i < SCols.length; i++) {
            if (SCols[i].value !== "default" && Shows[i].checked==true) {
                if (SFuncs[i].value === "default") {
                    if (SAlias[i].value.toString().trim() === "") {
                        var temp = STables[i].value + "." + SCols[i].value;
                        SelectList.add(temp);
                    }
                    else {
                        var temp = STables[i].value + "." + SCols[i].value + " AS " + SAlias[i].value ;
                        SelectList.add(temp);
                    }
                }
                else {
                    if (SAlias[i].value.toString().trim() === "") {
                        var temp = SFuncs[i].value + "(" + STables[i].value + "." + SCols[i].value + ")";
                        SelectList.add(temp);
                    }
                    else {
                        var temp = SFuncs[i].value + "(" + STables[i].value + "." + SCols[i].value + ")" + " AS " + SAlias[i].value;
                        SelectList.add(temp);
                    }
                }
            }
        }
        //list of order by
        const OrderByList = new Set();
        for (var i = 0; i < SSorts.length; i++) {
            if (SSorts[i].value !== "default" && SCols[i].value !== "default") {
                if (SFuncs[i].value === "default") {
                    var temp = STables[i].value + "." + SCols[i].value + "  " + SSorts[i].value;
                    OrderByList.add(temp);
                }
                else {
                    var temp = SFuncs[i].value + "(" + STables[i].value + "." + SCols[i].value + ")" + "  " + SSorts[i].value;
                    OrderByList.add(temp);
                }
            }
        }

        //list of where conditons
        // list of conditions in the tables
        const CWhereList = [];
        var cols = 5;
        for (var i = 0; i < cols; i++) {
            CWhereList[i] = [];
        }
        var isEmpty = true;
        for (var k = 0; k < SConds.length; k++) {
            var rowLength = SConds[k].rows.length;
            for (i = 0; i < rowLength; i++) {
                //gets cells of current row
                var oCells = SConds[k].rows.item(i).cells;
                //loops through each cell in current row
                for (var j = 0; j < oCells.length; j++) {
                    var data = oCells.item(j).firstChild.value.toString();
                    if (data.trim() !== "" && SCols[k].value !== "default") {
                        isEmpty = false;
                        @*temp = SAlias[k].value.toString();
                        if (temp.trim() === "") {*@
                        if (SFuncs[k].value === "default") {
                            var text = STables[k].value + "." + SCols[k].value + " " + data;
                            CWhereList[j].push(text);
                        }
                        else {
                            var text = SFuncs[k].value + "(" + STables[k].value + "." + SCols[k].value + ")" + data;
                            CWhereList[j].push(text);
                        }
                        @*}
                        else {
                            var text = SAlias[k].value + " " + data;
                            CWhereList[j].push(text);
                        }*@
                    }
                }
            }
        }


        //create query
        //Select
        if (SelectList.size > 0) {
            const array = [...SelectList];
            var query = 'SELECT ' + array + ' \r\n';
        }
        else {
            var query = 'SELECT * \r\n';
        }
        //From
        query += 'FROM ' + ChosedTables + ' \r\n';


        //where
        if (RWhereList.length > 0) {
            query += 'WHERE ' + RWhereList[0] + ' \r\n';
            for (var i = 1; i < RWhereList.length; i++) {
                query += " AND " + RWhereList[i] + ' \r\n';
            }
            var firstline = false;
            for (var j = 0; j < CWhereList.length; j++) {
                if (CWhereList[j].length > 0) {
                    if (firstline == false) {
                        query += " AND ((" + CWhereList[j][0] + " ";
                        firstline = true;
                        if (CWhereList[j].length > 1) {
                            for (var k = 1; k < CWhereList[j].length; k++) {
                                query += " AND " + CWhereList[j][k] + " ";
                            }
                        }
                    } else {
                        query += " ) OR (" + CWhereList[j][0] + " ";
                        if (CWhereList[j].length > 1) {
                            for (var k = 1; k < CWhereList[j].length; k++) {
                                query += " AND " + CWhereList[j][k] + " ";
                            }
                        }
                    }
                }
            }
            if (firstline == true) {
                query += ")) \r\n";
            }
        }
        else {
            var firstline = false;
            for (var j = 0; j < CWhereList.length; j++) {
                if (CWhereList[j].length > 0) {
                    if (firstline == false) {
                        query += "WHERE ((" + CWhereList[j][0] + " ";
                        firstline = true;
                        if (CWhereList[j].length > 1) {
                            for (var k = 1; k < CWhereList[j].length; k++) {
                                query += " AND " + CWhereList[j][k] + " ";
                            }
                        }
                    } else {
                        query += " ) OR (" + CWhereList[j][0] + " ";
                        if (CWhereList[j].length > 1) {
                            for (var k = 1; k < CWhereList[j].length; k++) {
                                query += " AND " + CWhereList[j][k] + " ";
                            }
                        }
                    }
                }
            }
            if (firstline == true) {
                query += ")) \r\n";
            }
        }
        //Group by
        if (GroupByList.length > 0) {
            query += 'GROUP BY ' + GroupByList + ' \r\n';
            var firstline = false;
            for (var j = 0; j < HavingList.length; j++) {
                if (HavingList[j].length > 0) {
                    if (firstline == false) {
                        query += "HAVING ((" + HavingList[j][0] + " ";
                        firstline = true;
                        if (HavingList[j].length > 1) {
                            for (var k = 1; k < HavingList[j].length; k++) {
                                query += " AND " + HavingList[j][k] + " ";
                            }
                        }
                    } else {
                        query += " ) OR (" + HavingList[j][0] + " ";
                        if (HavingList[j].length > 1) {
                            for (var k = 1; k < HavingList[j].length; k++) {
                                query += " AND " + HavingList[j][k] + " ";
                            }
                        }
                    }
                }
            }
            if (firstline == true) {
                query += ")) \r\n";
            }
        }
        //Order by
        if (OrderByList.size > 0) {
            const array = [...OrderByList];
            query += 'ORDER BY ' + array + ' \r\n';
        }

        queryArea.value = query;

    }

</script>


@*A Block contain Tables from database*@
<div id="TalbeBlock">
    <div>
        <input class="BTN" type="button" onclick="CheckAll(true)" value="SelectAll" />
        <input class="BTN" type="button" onclick="CheckAll(false)" value="DeleteAll" />
    </div>

    @{
        TableCounter = 1;
    }
    <div>
        @foreach (String table in ViewBag.Tables)
        {
            String temp = "Table" + TableCounter;
            <input type="checkbox" id=@temp value=@table name="BoxTable" onclick="CheckedTable()">
            <label for=@temp class="TableLabel">@table</label><br>
            TableCounter++;
        }
    </div>
</div>
@*The box that take the query generate from something in the sky*@

@using (Html.BeginForm("Report", "Home", FormMethod.Post,new { target="_blank"}))
{
<label for="RPTitle" class="LabelTitle">Title</label>
<input id="RPTitle" name="RPTitle" />
<textarea id="AreaQuery" name="AreaQuery"></textarea>
<div id="UserBlock">
    <input class="BtnUser" type="button" onclick="GenerateQuery()" value="Tạo Query" />
    <input class="BtnUser" type="submit" value="In Báo Cáo" @*onclick="window.open('@Url.Action("Report", "Home")')"*@ />
    <input class="right2" type="button" onclick="RemoveAllControl()" value="Remove All Select" />

    <div class="right">
        <input id="GByCheck" type="checkbox" onclick="GroupByChecked(this)" value="Group By" /><label for="GByCheck" class="TableLabel">Group By</label>
    </div>
</div>
}
<div id="LabelBlock">
    <table class="child2">
        <tr>
            <td><label class="childLabel">TABLE</label></td>
            <td><label class="childLabel">COLUMN</label></td>
            <td><label class="childLabel">FUNCTION</label></td>
            <td><label class="childLabel">SORT</label></td>
            <td><label class="childLabel">ALIAS</label></td>
            <td><label class="TableCond">CONDITIONS</label></td>
            <td class="TableCond"></td>
            <td class="TableCond"></td>
            <td class="TableCond"></td>
            <td class="TableCond"></td>
            <td><label class="childLabel">SHOW</label></td>

        </tr>
    </table>
</div>

@*this piece of shit take my whole life and it's the bars of condition for user to chose*@

<div id="parent">
    <div class="child2">
        <select id="TableSelect0" class="child" name="TS" onchange="SelectCol(this)">
            <option value="default">Chọn table</option>
        </select><select id="TableSelect0_Col" class="child" name="Col" onchange="GenerateQuery()">
            <option value="default">Chọn Col</option>
        </select><select name="Func" onchange="GenerateQuery()" class="child">
            <option value="default">Chọn Function</option>
            <option value="COUNT">COUNT</option>
            <option value="AVG">AVG</option>
            <option value="SUM">SUM</option>
            <option value="MIN">MIN</option>
            <option value="MAX">MAX</option>
        </select><select class="child" name="Sort" onchange="GenerateQuery()">
            <option value="default">Chọn Sort</option>
            <option value="ASC">Tăng dần</option>
            <option value="DESC">Giảm dần</option>
        </select><input class="AddBtn" name="alias" onkeyup="GenerateQuery()" />
    </div><div class="child2">
        <table class="child2" name="ConditionTable">
            <tr>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
            </tr>
            <tr>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
                <td><input class="TableCond" onkeyup="GenerateQuery()" /></td>
            </tr>
        </table>
        <br />
    </div><div class="child2">
        <input class="AddBtn" type="button" onclick="AddControl()" value="Add" /><input name="show" type="checkbox" onclick="GenerateQuery()" value="show" checked />
    </div>
</div>

